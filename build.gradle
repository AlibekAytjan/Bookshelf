buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.7"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: "com.matthewprenger.cursegradle"

version = getVersionFromJava(file("src/main/java/net/darkhax/bookshelf/lib/Constants.java"))
group= "net.darkhax.bookshelf"
archivesBaseName = "Bookshelf"

minecraft {

    version = "1.8.9-11.15.0.1710"
    runDir = "run"
    mappings = "stable_20"
}


processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
    
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    	
    rename '(.+_at.cfg)', 'META-INF/$1'
}

String getVersionFromJava(File file) {

    String release = "0";
    String update = "0";
    String patch = "0";

    String build = System.getenv("BUILD_NUMBER") ?: "0";
    def outfile = "";
    def ln = System.getProperty("line.separator")

    String prefix = "public static final String VERSION = \"";
    file.eachLine { String s ->

        String v = s.trim();
        if (v.startsWith(prefix)) {
            v = v.substring(prefix.length(), v.length() - 2);
            String[] pts = v.split("\\.");

            release = pts[0];
            update = pts[1];
            patch = pts[2];
            s = s.replaceAll(".0\";", ".${build}\";");
        }
        outfile += (s + ln);
    }

    file.write(outfile);

    return "$release.$update.$patch.$build";
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "deobf"
    manifest {
        attributes "FMLCorePlugin": "net.darkhax.bookshelf.asm.BookshelfLoadingPlugin", "FMLCorePluginContainsFMLMod": "true", 'FMLAT': 'bookshelf_at.cfg'
    }
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///var/www/html/maven")
        }
    }
}

jar {
    manifest {
        attributes "FMLCorePlugin": "net.darkhax.bookshelf.asm.BookshelfLoadingPlugin", "FMLCorePluginContainsFMLMod": "true", 'FMLAT': 'bookshelf_at.cfg'
    }
}

task getChangelog() {

    def proc = "git log --pretty=format:%s -1".execute();
    proc.waitFor();
    def message = "${proc.in.text}"

    if (message.toLowerCase().contains("#release")) {
        project.ext.release = true;
    } else {
        proc = "git log --pretty=format:%H -1".execute();
        proc.waitFor();
        project.ext.changelog = "${proc.in.text}" + "\nhttps://github.com/Darkhax-Minecraft/Bookshelf/commits/master";
        project.ext.release = false;
    }

}
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

curseforge {
    if (System.getenv("curseForgeApiKey"))
        apiKey = System.getenv("curseForgeApiKey")
    else
        apiKey = "0"


    project {
        if (System.getenv("projectId"))
            id = System.getenv("projectId")
        else
            id = "0"

        releaseType = project.release ? "release" : "beta"
        changelog = project.release ? versions.versions[versions.newestVersion].join("\n") : project.changelog

        addGameVersion "1.8.9"

        mainArtifact(jar)
        addArtifact(deobfJar)
        addArtifact(sourcesJar)
        addArtifact(javadocJar)
    }
}