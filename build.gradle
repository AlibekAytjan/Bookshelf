buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }

        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
        classpath "com.matthewprenger:CurseGradle:1.0.3-SNAPSHOT"
    }

}
import groovy.json.*

apply plugin: "forge"
apply plugin: "com.matthewprenger.cursegradle"

project.ext.mcVersion = "1.7.10"

version = getVersionFromJava(file("src/main/java/net/darkhax/bookshelf/lib/Constants.java"))
group = "net.darkhax.bookshelf"
archivesBaseName = "Bookshelf"

minecraft {
    version = "1.7.10-10.13.4.1517-1.7.10"
    runDir = "run"
    replace "${version}", project.version
}

ext.versionFile = file "versions.json"
project.ext.versions = new JsonSlurper().parseText versionFile.text

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

String getVersionFromJava(File file) {
    String projNumber = "0";
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String VERSION = \"";
    file.eachLine { String s ->

        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            projNumber = pts[0];
            major = pts[1];
            revision = pts[2];
        }
    }

    if (System.getenv().containsKey("BUILD_NUMBER")) {
        patch = System.getenv("BUILD_NUMBER");
    }

    return "1.7.10-$projNumber.$major.$revision.$patch";
}

task writeBuildNumber << {
    def file = file("src/main/java/net/darkhax/bookshelf/lib/Constants.java");
    def bn = System.getenv("BUILD_NUMBER") ?: 0;
    def outfile = "";
    def ln = System.getProperty("line.separator")

    file.eachLine { String s ->
        if (s.contains("PATCH_VERSION") && s.contains("= \"0\"")) {
            s = "    public static final String PATCH_VERSION = \"${bn}\";";
        }
        outfile += (s + ln);
    }

    file.write(outfile);
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "deobf"
    manifest {
        attributes "FMLCorePlugin": "net.darkhax.bookshelf.asm.BookshelfLoadingPlugin", "FMLCorePluginContainsFMLMod": "true"
    }
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///var/www/html/maven")
        }
    }
}

jar {
    manifest {
        attributes "FMLCorePlugin": "net.darkhax.bookshelf.asm.BookshelfLoadingPlugin", "FMLCorePluginContainsFMLMod": "true"
    }
}

task getChangelog() {

    def proc = "git log --pretty=format:%s -1".execute();
    proc.waitFor();
    def message = "${proc.in.text}"

    if (message.toLowerCase().contains("#release")) {
        project.ext.release = true;
    } else {
        proc = "git log --pretty=format:%H -1".execute();
        proc.waitFor();
        project.ext.changelog = "${proc.in.text}" + "\nhttps://github.com/Darkhax-Minecraft/Bookshelf/commits/master";
        project.ext.release = false;
    }

}

curseforge {
    if (System.getenv("curseForgeApiKey"))
        apiKey = System.getenv("curseForgeApiKey")
    else
        apiKey = 0


    project {
        if (System.getenv("projectId"))
            id = System.getenv("projectId")
        else
            id = 0

        releaseType = project.release ? "release" : "beta"
        changelog = project.release ? versions.versions[versions.newestVersion].join("\n") : project.changelog

        addGameVersion project.mcVersion

        mainArtifact(jar)
        addArtifact(deobfJar)
        addArtifact(sourcesJar)
        addArtifact(javadocJar)
    }
}
